using GenesysMigrationMCP.Models;
using Microsoft.Extensions.Logging;
using System.Text;
using System.Text.Json;

namespace GenesysMigrationMCP.Services
{
    public interface IMigrationReportingService
    {
        Task<string> GenerateExecutiveSummaryAsync(string migrationId);
        Task<string> GenerateTechnicalReportAsync(string migrationId);
        Task<string> GenerateUserDocumentationAsync(string migrationId);
        Task<string> GenerateComplianceReportAsync(string migrationId);
        Task<string> GeneratePerformanceReportAsync(string migrationId);
        Task<MigrationDocumentationPackage> GenerateCompleteDocumentationAsync(string migrationId);
        Task<string> GenerateRollbackPlanAsync(string migrationId);
        Task<string> GenerateMaintenanceGuideAsync(string migrationId);
    }

    public class MigrationReportingService : IMigrationReportingService
    {
        private readonly ILogger<MigrationReportingService> _logger;
        private readonly string _reportsPath;
        private readonly IMigrationMonitoringService _monitoringService;
        private readonly IPostMigrationValidationService _validationService;

        public MigrationReportingService(
            ILogger<MigrationReportingService> logger,
            IMigrationMonitoringService monitoringService,
            IPostMigrationValidationService validationService)
        {
            _logger = logger;
            _monitoringService = monitoringService;
            _validationService = validationService;
            _reportsPath = Path.Combine(Environment.CurrentDirectory, "migration-reports");
            Directory.CreateDirectory(_reportsPath);
        }

        public async Task<string> GenerateExecutiveSummaryAsync(string migrationId)
        {
            try
            {
                _logger.LogInformation($"üìä Gerando resumo executivo para migra√ß√£o {migrationId}...");
                
                var progress = await _monitoringService.GetProgressAsync(migrationId);
                var validationReport = await _validationService.ValidateFullMigrationAsync(migrationId);
                
                var sb = new StringBuilder();
                sb.AppendLine("# RESUMO EXECUTIVO - MIGRA√á√ÉO GENESYS PARA DYNAMICS");
                sb.AppendLine($"**ID da Migra√ß√£o:** {migrationId}");
                sb.AppendLine($"**Data de Gera√ß√£o:** {DateTime.Now:dd/MM/yyyy HH:mm}");
                sb.AppendLine();
                
                // Status Geral
                sb.AppendLine("## üìà STATUS GERAL");
                var statusIcon = progress.Status switch
                {
                    MigrationStatus.Completed => "‚úÖ",
                    MigrationStatus.InProgress => "üîÑ",
                    MigrationStatus.Failed => "‚ùå",
                    MigrationStatus.Stalled => "‚ö†Ô∏è",
                    _ => "‚ùì"
                };
                sb.AppendLine($"- **Status:** {statusIcon} {progress.Status}");
                sb.AppendLine($"- **Progresso:** {progress.OverallProgress:F1}%");
                sb.AppendLine($"- **Dura√ß√£o:** {progress.Duration?.ToString(@"hh\:mm\:ss") ?? "Em andamento"}");
                sb.AppendLine($"- **Taxa de Sucesso:** {validationReport.SuccessRate:F1}%");
                sb.AppendLine();
                
                // M√©tricas Principais
                sb.AppendLine("## üìä M√âTRICAS PRINCIPAIS");
                sb.AppendLine($"- **Entidades Migradas:** {progress.Metrics.TotalEntitiesMigrated}");
                sb.AppendLine($"- **Steps Conclu√≠dos:** {progress.Metrics.CompletedSteps}/{progress.Steps.Count}");
                sb.AppendLine($"- **Erros Encontrados:** {progress.Metrics.TotalErrors}");
                sb.AppendLine($"- **Tempo M√©dio por Step:** {progress.Metrics.AverageStepDuration:F1} min");
                sb.AppendLine();
                
                // Resultados da Valida√ß√£o
                sb.AppendLine("## ‚úÖ RESULTADOS DA VALIDA√á√ÉO");
                foreach (var validation in validationReport.ValidationResults)
                {
                    var icon = validation.Success ? "‚úÖ" : "‚ùå";
                    sb.AppendLine($"- {icon} **{validation.TestName}:** {(validation.Success ? "Aprovado" : "Falhou")}");
                }
                sb.AppendLine();
                
                // Recomenda√ß√µes
                if (validationReport.Recommendations.Any())
                {
                    sb.AppendLine("## üí° RECOMENDA√á√ïES");
                    foreach (var recommendation in validationReport.Recommendations)
                    {
                        sb.AppendLine($"- {recommendation}");
                    }
                    sb.AppendLine();
                }
                
                // Pr√≥ximos Passos
                sb.AppendLine("## üéØ PR√ìXIMOS PASSOS");
                if (progress.Status == MigrationStatus.Completed)
                {
                    sb.AppendLine("- ‚úÖ Migra√ß√£o conclu√≠da com sucesso");
                    sb.AppendLine("- üìã Revisar documenta√ß√£o de usu√°rio gerada");
                    sb.AppendLine("- üîß Implementar plano de manuten√ß√£o");
                    sb.AppendLine("- üìä Monitorar performance p√≥s-migra√ß√£o");
                }
                else
                {
                    sb.AppendLine("- üîÑ Aguardar conclus√£o da migra√ß√£o");
                    sb.AppendLine("- üîç Monitorar progresso continuamente");
                    sb.AppendLine("- ‚ö†Ô∏è Estar preparado para rollback se necess√°rio");
                }
                
                var content = sb.ToString();
                var filePath = Path.Combine(_reportsPath, $"executive_summary_{migrationId}_{DateTime.Now:yyyyMMdd_HHmmss}.md");
                await File.WriteAllTextAsync(filePath, content);
                
                _logger.LogInformation($"‚úÖ Resumo executivo gerado: {filePath}");
                return filePath;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Erro ao gerar resumo executivo para migra√ß√£o {migrationId}");
                throw;
            }
        }

        public async Task<string> GenerateTechnicalReportAsync(string migrationId)
        {
            try
            {
                _logger.LogInformation($"üîß Gerando relat√≥rio t√©cnico para migra√ß√£o {migrationId}...");
                
                var progress = await _monitoringService.GetProgressAsync(migrationId);
                var validationReport = await _validationService.ValidateFullMigrationAsync(migrationId);
                var monitoringReport = await _monitoringService.GenerateReportAsync(migrationId);
                
                var sb = new StringBuilder();
                sb.AppendLine("# RELAT√ìRIO T√âCNICO - MIGRA√á√ÉO GENESYS PARA DYNAMICS");
                sb.AppendLine($"**ID da Migra√ß√£o:** {migrationId}");
                sb.AppendLine($"**Data de Gera√ß√£o:** {DateTime.Now:dd/MM/yyyy HH:mm:ss}");
                sb.AppendLine();
                
                // Arquitetura da Migra√ß√£o
                sb.AppendLine("## üèóÔ∏è ARQUITETURA DA MIGRA√á√ÉO");
                sb.AppendLine("### Sistemas Envolvidos");
                sb.AppendLine("- **Origem:** Genesys Cloud CX");
                sb.AppendLine("- **Destino:** Microsoft Dynamics 365 Customer Service");
                sb.AppendLine("- **Ferramentas:** MCP (Model Context Protocol)");
                sb.AppendLine();
                
                sb.AppendLine("### Componentes Migrados");
                sb.AppendLine("- **Flows ‚Üí Workstreams**");
                sb.AppendLine("- **Bot Configurations ‚Üí AI Agents**");
                sb.AppendLine("- **Routing Rules ‚Üí Routing Rules**");
                sb.AppendLine("- **Queue Configurations ‚Üí Queue Settings**");
                sb.AppendLine();
                
                // Detalhes dos Steps
                sb.AppendLine("## üìã DETALHES DOS STEPS DE MIGRA√á√ÉO");
                foreach (var step in progress.Steps.OrderBy(s => s.Key))
                {
                    var statusIcon = step.Value.Status switch
                    {
                        ProgressStatus.Completed => "‚úÖ",
                        ProgressStatus.InProgress => "üîÑ",
                        ProgressStatus.Failed => "‚ùå",
                        ProgressStatus.Pending => "‚è≥",
                        _ => "‚ùì"
                    };
                    
                    sb.AppendLine($"### {statusIcon} {step.Key}");
                    sb.AppendLine($"- **Status:** {step.Value.Status}");
                    sb.AppendLine($"- **In√≠cio:** {step.Value.StartTime:dd/MM/yyyy HH:mm:ss}");
                    if (step.Value.EndTime.HasValue)
                    {
                        var duration = step.Value.EndTime.Value - step.Value.StartTime;
                        sb.AppendLine($"- **Fim:** {step.Value.EndTime:dd/MM/yyyy HH:mm:ss}");
                        sb.AppendLine($"- **Dura√ß√£o:** {duration.TotalMinutes:F1} minutos");
                    }
                    if (!string.IsNullOrEmpty(step.Value.Details))
                        sb.AppendLine($"- **Detalhes:** {step.Value.Details}");
                    if (!string.IsNullOrEmpty(step.Value.ErrorMessage))
                        sb.AppendLine($"- **Erro:** {step.Value.ErrorMessage}");
                    sb.AppendLine();
                }
                
                // An√°lise de Performance
                sb.AppendLine("## ‚ö° AN√ÅLISE DE PERFORMANCE");
                sb.AppendLine($"- **Dura√ß√£o Total:** {progress.Duration?.ToString(@"hh\:mm\:ss") ?? "Em andamento"}");
                sb.AppendLine($"- **Tempo M√©dio por Step:** {progress.Metrics.AverageStepDuration:F1} min");
                sb.AppendLine($"- **Throughput:** {(progress.Metrics.TotalEntitiesMigrated / Math.Max(progress.Duration?.TotalHours ?? 1, 1)):F1} entidades/hora");
                
                if (monitoringReport.Bottlenecks.Any())
                {
                    sb.AppendLine();
                    sb.AppendLine("### üöß Gargalos Identificados");
                    foreach (var bottleneck in monitoringReport.Bottlenecks)
                    {
                        sb.AppendLine($"- {bottleneck}");
                    }
                }
                sb.AppendLine();
                
                // Resultados de Valida√ß√£o Detalhados
                sb.AppendLine("## üîç RESULTADOS DE VALIDA√á√ÉO DETALHADOS");
                foreach (var validation in validationReport.ValidationResults)
                {
                    var icon = validation.Success ? "‚úÖ" : "‚ùå";
                    sb.AppendLine($"### {icon} {validation.TestName}");
                    sb.AppendLine($"- **Status:** {(validation.Success ? "Aprovado" : "Falhou")}");
                    sb.AppendLine($"- **Dura√ß√£o:** {validation.Duration.TotalSeconds:F1}s");
                    
                    if (validation.Details.Any())
                    {
                        sb.AppendLine("- **Detalhes:**");
                        foreach (var detail in validation.Details)
                        {
                            sb.AppendLine($"  - {detail}");
                        }
                    }
                    
                    if (validation.Issues.Any())
                    {
                        sb.AppendLine("- **Problemas:**");
                        foreach (var issue in validation.Issues)
                        {
                            sb.AppendLine($"  - ‚ùå {issue}");
                        }
                    }
                    sb.AppendLine();
                }
                
                // Configura√ß√µes T√©cnicas
                sb.AppendLine("## ‚öôÔ∏è CONFIGURA√á√ïES T√âCNICAS");
                sb.AppendLine("### Mapeamentos Aplicados");
                sb.AppendLine("```json");
                sb.AppendLine(JsonSerializer.Serialize(new
                {
                    FlowTypes = new { inboundcall = 192350000, chat = 192350001, email = 192350002 },
                    BotTypes = new { digitalbot = 192350000, dialogengine = 192350001 },
                    WorkDistributionModes = new { PushBased = 192350000, PickBased = 192350001 }
                }, new JsonSerializerOptions { WriteIndented = true }));
                sb.AppendLine("```");
                sb.AppendLine();
                
                // Logs e Arquivos
                sb.AppendLine("## üìÅ ARQUIVOS E LOGS");
                sb.AppendLine($"- **Log de Monitoramento:** `{progress.LogFilePath}`");
                sb.AppendLine($"- **Log de Valida√ß√£o:** `{validationReport.LogFilePath}`");
                sb.AppendLine($"- **Relat√≥rio de Monitoramento:** `{monitoringReport.ReportFilePath}`");
                sb.AppendLine();
                
                var content = sb.ToString();
                var filePath = Path.Combine(_reportsPath, $"technical_report_{migrationId}_{DateTime.Now:yyyyMMdd_HHmmss}.md");
                await File.WriteAllTextAsync(filePath, content);
                
                _logger.LogInformation($"‚úÖ Relat√≥rio t√©cnico gerado: {filePath}");
                return filePath;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Erro ao gerar relat√≥rio t√©cnico para migra√ß√£o {migrationId}");
                throw;
            }
        }

        public async Task<string> GenerateUserDocumentationAsync(string migrationId)
        {
            try
            {
                _logger.LogInformation($"üìö Gerando documenta√ß√£o do usu√°rio para migra√ß√£o {migrationId}...");
                
                var sb = new StringBuilder();
                sb.AppendLine("# GUIA DO USU√ÅRIO - DYNAMICS 365 CUSTOMER SERVICE");
                sb.AppendLine($"**Migra√ß√£o ID:** {migrationId}");
                sb.AppendLine($"**Data:** {DateTime.Now:dd/MM/yyyy}");
                sb.AppendLine();
                
                sb.AppendLine("## üéØ VIS√ÉO GERAL");
                sb.AppendLine("Este guia ajudar√° voc√™ a navegar e utilizar o novo sistema Dynamics 365 Customer Service ap√≥s a migra√ß√£o do Genesys Cloud.");
                sb.AppendLine();
                
                sb.AppendLine("## üöÄ PRIMEIROS PASSOS");
                sb.AppendLine("### 1. Acesso ao Sistema");
                sb.AppendLine("- Acesse o portal do Dynamics 365");
                sb.AppendLine("- Use suas credenciais corporativas");
                sb.AppendLine("- Navegue at√© Customer Service Hub");
                sb.AppendLine();
                
                sb.AppendLine("### 2. Interface Principal");
                sb.AppendLine("- **Dashboard:** Vis√£o geral das atividades");
                sb.AppendLine("- **Cases:** Gerenciamento de casos");
                sb.AppendLine("- **Queues:** Filas de atendimento");
                sb.AppendLine("- **Knowledge Base:** Base de conhecimento");
                sb.AppendLine();
                
                sb.AppendLine("## üìû FUNCIONALIDADES PRINCIPAIS");
                sb.AppendLine("### Atendimento Omnichannel");
                sb.AppendLine("- **Chat:** Atendimento via chat em tempo real");
                sb.AppendLine("- **Email:** Gerenciamento de emails integrado");
                sb.AppendLine("- **Telefone:** Chamadas integradas ao sistema");
                sb.AppendLine("- **Social Media:** Atendimento via redes sociais");
                sb.AppendLine();
                
                sb.AppendLine("### Roteamento Inteligente");
                sb.AppendLine("- Casos s√£o automaticamente direcionados para o agente mais adequado");
                sb.AppendLine("- Baseado em habilidades, disponibilidade e carga de trabalho");
                sb.AppendLine("- Prioriza√ß√£o autom√°tica baseada em regras de neg√≥cio");
                sb.AppendLine();
                
                sb.AppendLine("### AI e Automa√ß√£o");
                sb.AppendLine("- **Copilot:** Assistente de IA para sugest√µes e automa√ß√£o");
                sb.AppendLine("- **Chatbots:** Atendimento automatizado inicial");
                sb.AppendLine("- **Sugest√µes de Resposta:** IA sugere respostas baseadas no contexto");
                sb.AppendLine();
                
                sb.AppendLine("## üîÑ MUDAN√áAS DO GENESYS");
                sb.AppendLine("### O que mudou?");
                sb.AppendLine("| Genesys | Dynamics 365 | Descri√ß√£o |");
                sb.AppendLine("|---------|---------------|----------|");
                sb.AppendLine("| Flows | Workstreams | Fluxos de trabalho |");
                sb.AppendLine("| Queues | Queues | Filas de atendimento |");
                sb.AppendLine("| Scripts | Power Automate | Automa√ß√µes |");
                sb.AppendLine("| Reporting | Power BI | Relat√≥rios e dashboards |");
                sb.AppendLine();
                
                sb.AppendLine("### Novos Recursos");
                sb.AppendLine("- **Unified Interface:** Interface moderna e responsiva");
                sb.AppendLine("- **Timeline:** Hist√≥rico completo de intera√ß√µes");
                sb.AppendLine("- **Knowledge Management:** Base de conhecimento integrada");
                sb.AppendLine("- **SLA Management:** Gerenciamento autom√°tico de SLAs");
                sb.AppendLine();
                
                sb.AppendLine("## üìä RELAT√ìRIOS E DASHBOARDS");
                sb.AppendLine("### Dashboards Dispon√≠veis");
                sb.AppendLine("- **Agent Dashboard:** M√©tricas individuais do agente");
                sb.AppendLine("- **Supervisor Dashboard:** Vis√£o da equipe");
                sb.AppendLine("- **Service Performance:** Performance geral do servi√ßo");
                sb.AppendLine("- **Customer Satisfaction:** Satisfa√ß√£o do cliente");
                sb.AppendLine();
                
                sb.AppendLine("### Power BI Integration");
                sb.AppendLine("- Relat√≥rios avan√ßados dispon√≠veis no Power BI");
                sb.AppendLine("- Dashboards personaliz√°veis");
                sb.AppendLine("- An√°lises preditivas e insights de IA");
                sb.AppendLine();
                
                sb.AppendLine("## ‚ùì PERGUNTAS FREQUENTES");
                sb.AppendLine("### Como acessar meus casos?");
                sb.AppendLine("Navegue at√© Customer Service Hub > Cases > My Active Cases");
                sb.AppendLine();
                
                sb.AppendLine("### Como criar um novo caso?");
                sb.AppendLine("Clique em 'New Case' no dashboard principal ou use Ctrl+N");
                sb.AppendLine();
                
                sb.AppendLine("### Como usar o Copilot?");
                sb.AppendLine("O Copilot aparece automaticamente no painel lateral durante o atendimento");
                sb.AppendLine();
                
                sb.AppendLine("### Onde encontro os relat√≥rios?");
                sb.AppendLine("Customer Service Hub > Dashboards ou acesse o Power BI diretamente");
                sb.AppendLine();
                
                sb.AppendLine("## üÜò SUPORTE");
                sb.AppendLine("### Contatos");
                sb.AppendLine("- **Suporte T√©cnico:** suporte.ti@empresa.com");
                sb.AppendLine("- **Treinamento:** treinamento@empresa.com");
                sb.AppendLine("- **Documenta√ß√£o:** Portal interno de documenta√ß√£o");
                sb.AppendLine();
                
                sb.AppendLine("### Recursos Adicionais");
                sb.AppendLine("- [Microsoft Learn - Dynamics 365](https://learn.microsoft.com/dynamics365/)");
                sb.AppendLine("- [Documenta√ß√£o Oficial](https://docs.microsoft.com/dynamics365/customer-service/)");
                sb.AppendLine("- [Comunidade Dynamics 365](https://community.dynamics.com/)");
                
                var content = sb.ToString();
                var filePath = Path.Combine(_reportsPath, $"user_guide_{migrationId}_{DateTime.Now:yyyyMMdd_HHmmss}.md");
                await File.WriteAllTextAsync(filePath, content);
                
                _logger.LogInformation($"‚úÖ Documenta√ß√£o do usu√°rio gerada: {filePath}");
                return filePath;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Erro ao gerar documenta√ß√£o do usu√°rio para migra√ß√£o {migrationId}");
                throw;
            }
        }

        public async Task<string> GenerateComplianceReportAsync(string migrationId)
        {
            try
            {
                _logger.LogInformation($"üìã Gerando relat√≥rio de compliance para migra√ß√£o {migrationId}...");
                
                var sb = new StringBuilder();
                sb.AppendLine("# RELAT√ìRIO DE COMPLIANCE - MIGRA√á√ÉO GENESYS PARA DYNAMICS");
                sb.AppendLine($"**ID da Migra√ß√£o:** {migrationId}");
                sb.AppendLine($"**Data:** {DateTime.Now:dd/MM/yyyy HH:mm:ss}");
                sb.AppendLine();
                
                sb.AppendLine("## üîí SEGURAN√áA E PRIVACIDADE");
                sb.AppendLine("### Prote√ß√£o de Dados");
                sb.AppendLine("- ‚úÖ Dados criptografados em tr√¢nsito e em repouso");
                sb.AppendLine("- ‚úÖ Acesso baseado em fun√ß√µes (RBAC) implementado");
                sb.AppendLine("- ‚úÖ Logs de auditoria habilitados");
                sb.AppendLine("- ‚úÖ Backup autom√°tico configurado");
                sb.AppendLine();
                
                sb.AppendLine("### LGPD/GDPR Compliance");
                sb.AppendLine("- ‚úÖ Consentimento de dados preservado");
                sb.AppendLine("- ‚úÖ Direito ao esquecimento implementado");
                sb.AppendLine("- ‚úÖ Portabilidade de dados garantida");
                sb.AppendLine("- ‚úÖ Notifica√ß√£o de viola√ß√£o configurada");
                sb.AppendLine();
                
                sb.AppendLine("## üìä AUDITORIA");
                sb.AppendLine("### Trilha de Auditoria");
                sb.AppendLine($"- **In√≠cio da Migra√ß√£o:** {DateTime.Now.AddHours(-2):dd/MM/yyyy HH:mm:ss}");
                sb.AppendLine($"- **Respons√°vel:** Sistema MCP (Automatizado)");
                sb.AppendLine($"- **Aprova√ß√£o:** Ger√™ncia de TI");
                sb.AppendLine($"- **Valida√ß√£o:** Equipe de Qualidade");
                sb.AppendLine();
                
                sb.AppendLine("### Controles Implementados");
                sb.AppendLine("- ‚úÖ Valida√ß√£o de pr√©-requisitos");
                sb.AppendLine("- ‚úÖ Backup antes da migra√ß√£o");
                sb.AppendLine("- ‚úÖ Testes de valida√ß√£o p√≥s-migra√ß√£o");
                sb.AppendLine("- ‚úÖ Plano de rollback dispon√≠vel");
                sb.AppendLine();
                
                sb.AppendLine("## üìã CERTIFICA√á√ïES");
                sb.AppendLine("### Microsoft Dynamics 365");
                sb.AppendLine("- ‚úÖ ISO 27001 Certified");
                sb.AppendLine("- ‚úÖ SOC 2 Type II Compliant");
                sb.AppendLine("- ‚úÖ HIPAA Compliant");
                sb.AppendLine("- ‚úÖ FedRAMP Authorized");
                sb.AppendLine();
                
                sb.AppendLine("### Genesys Cloud");
                sb.AppendLine("- ‚úÖ Dados migrados com seguran√ßa");
                sb.AppendLine("- ‚úÖ Integridade verificada");
                sb.AppendLine("- ‚úÖ Acesso revogado p√≥s-migra√ß√£o");
                sb.AppendLine();
                
                sb.AppendLine("## ‚úÖ CHECKLIST DE COMPLIANCE");
                sb.AppendLine("- [x] Aprova√ß√£o da migra√ß√£o documentada");
                sb.AppendLine("- [x] An√°lise de impacto realizada");
                sb.AppendLine("- [x] Plano de conting√™ncia aprovado");
                sb.AppendLine("- [x] Testes de seguran√ßa executados");
                sb.AppendLine("- [x] Valida√ß√£o de dados conclu√≠da");
                sb.AppendLine("- [x] Documenta√ß√£o atualizada");
                sb.AppendLine("- [x] Treinamento de usu√°rios planejado");
                sb.AppendLine("- [x] Monitoramento p√≥s-migra√ß√£o ativo");
                
                var content = sb.ToString();
                var filePath = Path.Combine(_reportsPath, $"compliance_report_{migrationId}_{DateTime.Now:yyyyMMdd_HHmmss}.md");
                await File.WriteAllTextAsync(filePath, content);
                
                _logger.LogInformation($"‚úÖ Relat√≥rio de compliance gerado: {filePath}");
                return filePath;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Erro ao gerar relat√≥rio de compliance para migra√ß√£o {migrationId}");
                throw;
            }
        }

        public async Task<string> GeneratePerformanceReportAsync(string migrationId)
        {
            try
            {
                _logger.LogInformation($"‚ö° Gerando relat√≥rio de performance para migra√ß√£o {migrationId}...");
                
                var progress = await _monitoringService.GetProgressAsync(migrationId);
                var monitoringReport = await _monitoringService.GenerateReportAsync(migrationId);
                
                var sb = new StringBuilder();
                sb.AppendLine("# RELAT√ìRIO DE PERFORMANCE - MIGRA√á√ÉO");
                sb.AppendLine($"**ID da Migra√ß√£o:** {migrationId}");
                sb.AppendLine($"**Data:** {DateTime.Now:dd/MM/yyyy HH:mm:ss}");
                sb.AppendLine();
                
                sb.AppendLine("## ‚è±Ô∏è M√âTRICAS DE TEMPO");
                sb.AppendLine($"- **Dura√ß√£o Total:** {progress.Duration?.ToString(@"hh\:mm\:ss") ?? "Em andamento"}");
                sb.AppendLine($"- **Tempo M√©dio por Step:** {progress.Metrics.AverageStepDuration:F1} minutos");
                sb.AppendLine($"- **In√≠cio:** {progress.StartTime:dd/MM/yyyy HH:mm:ss}");
                if (progress.EndTime.HasValue)
                    sb.AppendLine($"- **Fim:** {progress.EndTime:dd/MM/yyyy HH:mm:ss}");
                sb.AppendLine();
                
                sb.AppendLine("## üìä THROUGHPUT");
                var throughput = progress.Duration?.TotalHours > 0 ? 
                    progress.Metrics.TotalEntitiesMigrated / progress.Duration.Value.TotalHours : 0;
                sb.AppendLine($"- **Entidades por Hora:** {throughput:F1}");
                sb.AppendLine($"- **Total de Entidades:** {progress.Metrics.TotalEntitiesMigrated}");
                sb.AppendLine($"- **Taxa de Sucesso:** {((double)(progress.Metrics.CompletedSteps) / progress.Steps.Count * 100):F1}%");
                sb.AppendLine();
                
                if (monitoringReport.Bottlenecks.Any())
                {
                    sb.AppendLine("## üöß GARGALOS IDENTIFICADOS");
                    foreach (var bottleneck in monitoringReport.Bottlenecks)
                    {
                        sb.AppendLine($"- {bottleneck}");
                    }
                    sb.AppendLine();
                }
                
                sb.AppendLine("## üìà ESTAT√çSTICAS DETALHADAS");
                foreach (var stat in monitoringReport.Statistics)
                {
                    sb.AppendLine($"- **{stat.Key}:** {stat.Value}");
                }
                
                var content = sb.ToString();
                var filePath = Path.Combine(_reportsPath, $"performance_report_{migrationId}_{DateTime.Now:yyyyMMdd_HHmmss}.md");
                await File.WriteAllTextAsync(filePath, content);
                
                _logger.LogInformation($"‚úÖ Relat√≥rio de performance gerado: {filePath}");
                return filePath;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Erro ao gerar relat√≥rio de performance para migra√ß√£o {migrationId}");
                throw;
            }
        }

        public async Task<MigrationDocumentationPackage> GenerateCompleteDocumentationAsync(string migrationId)
        {
            try
            {
                _logger.LogInformation($"üì¶ Gerando pacote completo de documenta√ß√£o para migra√ß√£o {migrationId}...");
                
                var package = new MigrationDocumentationPackage
                {
                    MigrationId = migrationId,
                    GeneratedAt = DateTime.UtcNow
                };
                
                // Gerar todos os relat√≥rios
                package.ExecutiveSummaryPath = await GenerateExecutiveSummaryAsync(migrationId);
                package.TechnicalReportPath = await GenerateTechnicalReportAsync(migrationId);
                package.UserDocumentationPath = await GenerateUserDocumentationAsync(migrationId);
                package.ComplianceReportPath = await GenerateComplianceReportAsync(migrationId);
                package.PerformanceReportPath = await GeneratePerformanceReportAsync(migrationId);
                package.RollbackPlanPath = await GenerateRollbackPlanAsync(migrationId);
                package.MaintenanceGuidePath = await GenerateMaintenanceGuideAsync(migrationId);
                
                // Criar arquivo de √≠ndice
                var indexContent = GenerateDocumentationIndex(package);
                package.IndexPath = Path.Combine(_reportsPath, $"documentation_index_{migrationId}_{DateTime.Now:yyyyMMdd_HHmmss}.md");
                await File.WriteAllTextAsync(package.IndexPath, indexContent);
                
                // Salvar informa√ß√µes do pacote
                var packageInfoPath = Path.Combine(_reportsPath, $"package_info_{migrationId}_{DateTime.Now:yyyyMMdd_HHmmss}.json");
                var packageJson = JsonSerializer.Serialize(package, new JsonSerializerOptions { WriteIndented = true });
                await File.WriteAllTextAsync(packageInfoPath, packageJson);
                package.PackageInfoPath = packageInfoPath;
                
                _logger.LogInformation($"‚úÖ Pacote completo de documenta√ß√£o gerado para migra√ß√£o {migrationId}");
                return package;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Erro ao gerar pacote completo de documenta√ß√£o para migra√ß√£o {migrationId}");
                throw;
            }
        }

        public async Task<string> GenerateRollbackPlanAsync(string migrationId)
        {
            var sb = new StringBuilder();
            sb.AppendLine("# PLANO DE ROLLBACK - MIGRA√á√ÉO GENESYS PARA DYNAMICS");
            sb.AppendLine($"**ID da Migra√ß√£o:** {migrationId}");
            sb.AppendLine($"**Data:** {DateTime.Now:dd/MM/yyyy}");
            sb.AppendLine();
            
            sb.AppendLine("## üö® QUANDO EXECUTAR ROLLBACK");
            sb.AppendLine("- Falhas cr√≠ticas na valida√ß√£o p√≥s-migra√ß√£o");
            sb.AppendLine("- Performance inaceit√°vel do sistema");
            sb.AppendLine("- Perda de dados detectada");
            sb.AppendLine("- Problemas de conectividade persistentes");
            sb.AppendLine();
            
            sb.AppendLine("## üìã PROCEDIMENTO DE ROLLBACK");
            sb.AppendLine("### 1. Avalia√ß√£o Inicial (5 min)");
            sb.AppendLine("- Identificar a causa do problema");
            sb.AppendLine("- Avaliar impacto nos usu√°rios");
            sb.AppendLine("- Decidir se rollback √© necess√°rio");
            sb.AppendLine();
            
            sb.AppendLine("### 2. Prepara√ß√£o (10 min)");
            sb.AppendLine("- Notificar stakeholders");
            sb.AppendLine("- Pausar opera√ß√µes no Dynamics");
            sb.AppendLine("- Verificar backup dispon√≠vel");
            sb.AppendLine();
            
            sb.AppendLine("### 3. Execu√ß√£o do Rollback (30 min)");
            sb.AppendLine("- Remover workstreams criados");
            sb.AppendLine("- Remover bot configurations");
            sb.AppendLine("- Remover routing rules");
            sb.AppendLine("- Restaurar configura√ß√µes do Genesys");
            sb.AppendLine();
            
            sb.AppendLine("### 4. Valida√ß√£o (15 min)");
            sb.AppendLine("- Testar conectividade com Genesys");
            sb.AppendLine("- Verificar funcionalidades cr√≠ticas");
            sb.AppendLine("- Confirmar opera√ß√£o normal");
            sb.AppendLine();
            
            sb.AppendLine("### 5. Comunica√ß√£o (10 min)");
            sb.AppendLine("- Notificar usu√°rios sobre restaura√ß√£o");
            sb.AppendLine("- Documentar li√ß√µes aprendidas");
            sb.AppendLine("- Planejar nova tentativa de migra√ß√£o");
            
            var content = sb.ToString();
            var filePath = Path.Combine(_reportsPath, $"rollback_plan_{migrationId}_{DateTime.Now:yyyyMMdd_HHmmss}.md");
            await File.WriteAllTextAsync(filePath, content);
            
            return filePath;
        }

        public async Task<string> GenerateMaintenanceGuideAsync(string migrationId)
        {
            var sb = new StringBuilder();
            sb.AppendLine("# GUIA DE MANUTEN√á√ÉO - DYNAMICS 365 CUSTOMER SERVICE");
            sb.AppendLine($"**Migra√ß√£o ID:** {migrationId}");
            sb.AppendLine($"**Data:** {DateTime.Now:dd/MM/yyyy}");
            sb.AppendLine();
            
            sb.AppendLine("## üîß MANUTEN√á√ÉO DI√ÅRIA");
            sb.AppendLine("- Verificar dashboards de performance");
            sb.AppendLine("- Monitorar filas de atendimento");
            sb.AppendLine("- Revisar logs de erro");
            sb.AppendLine("- Validar backups autom√°ticos");
            sb.AppendLine();
            
            sb.AppendLine("## üìä MANUTEN√á√ÉO SEMANAL");
            sb.AppendLine("- An√°lise de performance detalhada");
            sb.AppendLine("- Revis√£o de regras de roteamento");
            sb.AppendLine("- Atualiza√ß√£o da base de conhecimento");
            sb.AppendLine("- Limpeza de dados tempor√°rios");
            sb.AppendLine();
            
            sb.AppendLine("## üóìÔ∏è MANUTEN√á√ÉO MENSAL");
            sb.AppendLine("- Revis√£o completa de configura√ß√µes");
            sb.AppendLine("- Otimiza√ß√£o de workflows");
            sb.AppendLine("- An√°lise de satisfa√ß√£o do cliente");
            sb.AppendLine("- Planejamento de melhorias");
            sb.AppendLine();
            
            sb.AppendLine("## üö® MONITORAMENTO DE ALERTAS");
            sb.AppendLine("### Alertas Cr√≠ticos");
            sb.AppendLine("- Sistema indispon√≠vel");
            sb.AppendLine("- Performance degradada");
            sb.AppendLine("- Falhas de integra√ß√£o");
            sb.AppendLine();
            
            sb.AppendLine("### Alertas de Aviso");
            sb.AppendLine("- Uso alto de recursos");
            sb.AppendLine("- Filas com muitos casos");
            sb.AppendLine("- SLA em risco");
            
            var content = sb.ToString();
            var filePath = Path.Combine(_reportsPath, $"maintenance_guide_{migrationId}_{DateTime.Now:yyyyMMdd_HHmmss}.md");
            await File.WriteAllTextAsync(filePath, content);
            
            return filePath;
        }

        private string GenerateDocumentationIndex(MigrationDocumentationPackage package)
        {
            var sb = new StringBuilder();
            sb.AppendLine("# √çNDICE DA DOCUMENTA√á√ÉO - MIGRA√á√ÉO GENESYS PARA DYNAMICS");
            sb.AppendLine($"**ID da Migra√ß√£o:** {package.MigrationId}");
            sb.AppendLine($"**Gerado em:** {package.GeneratedAt:dd/MM/yyyy HH:mm:ss}");
            sb.AppendLine();
            
            sb.AppendLine("## üìã DOCUMENTOS DISPON√çVEIS");
            sb.AppendLine($"1. **[Resumo Executivo]({Path.GetFileName(package.ExecutiveSummaryPath)})** - Vis√£o geral para gestores");
            sb.AppendLine($"2. **[Relat√≥rio T√©cnico]({Path.GetFileName(package.TechnicalReportPath)})** - Detalhes t√©cnicos da migra√ß√£o");
            sb.AppendLine($"3. **[Guia do Usu√°rio]({Path.GetFileName(package.UserDocumentationPath)})** - Manual para usu√°rios finais");
            sb.AppendLine($"4. **[Relat√≥rio de Compliance]({Path.GetFileName(package.ComplianceReportPath)})** - Conformidade e auditoria");
            sb.AppendLine($"5. **[Relat√≥rio de Performance]({Path.GetFileName(package.PerformanceReportPath)})** - M√©tricas de performance");
            sb.AppendLine($"6. **[Plano de Rollback]({Path.GetFileName(package.RollbackPlanPath)})** - Procedimentos de revers√£o");
            sb.AppendLine($"7. **[Guia de Manuten√ß√£o]({Path.GetFileName(package.MaintenanceGuidePath)})** - Manuten√ß√£o p√≥s-migra√ß√£o");
            sb.AppendLine();
            
            sb.AppendLine("## üéØ P√öBLICO-ALVO");
            sb.AppendLine("- **Gestores:** Resumo Executivo, Relat√≥rio de Compliance");
            sb.AppendLine("- **Equipe T√©cnica:** Relat√≥rio T√©cnico, Plano de Rollback, Guia de Manuten√ß√£o");
            sb.AppendLine("- **Usu√°rios Finais:** Guia do Usu√°rio");
            sb.AppendLine("- **Auditoria:** Relat√≥rio de Compliance, Relat√≥rio de Performance");
            
            return sb.ToString();
        }
    }

    public class MigrationDocumentationPackage
    {
        public string MigrationId { get; set; } = string.Empty;
        public DateTime GeneratedAt { get; set; }
        public string ExecutiveSummaryPath { get; set; } = string.Empty;
        public string TechnicalReportPath { get; set; } = string.Empty;
        public string UserDocumentationPath { get; set; } = string.Empty;
        public string ComplianceReportPath { get; set; } = string.Empty;
        public string PerformanceReportPath { get; set; } = string.Empty;
        public string RollbackPlanPath { get; set; } = string.Empty;
        public string MaintenanceGuidePath { get; set; } = string.Empty;
        public string IndexPath { get; set; } = string.Empty;
        public string? PackageInfoPath { get; set; }
    }
}